import os
import cv2
import numpy as np
import joblib
import json
import time
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# ======== [1] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ========
DATA_DIR = "data"
# CLASSES —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
IMG_SIZE = (128, 128)  # –†–∞–∑–º–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏
DISPLAY_SIZE = (400, 400)  # –†–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
FPS = 5
RECORD_TIME = 5

# ======== [2] –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ ========
def record_dataset(class_name):
    print(f"\nüìπ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞: {class_name}")
    
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("   ‚ùå –û—à–∏–±–∫–∞: –∫–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü–∞–ø–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –≤ main_menu, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    os.makedirs(f"{DATA_DIR}/{class_name}", exist_ok=True)
    # print(f"   ‚úÖ –ü–∞–ø–∫–∞ '{DATA_DIR}/{class_name}' –≥–æ—Ç–æ–≤–∞") # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ main_menu

    start_time = time.time()
    frame_count = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        resized = cv2.resize(gray, IMG_SIZE)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        model_view = cv2.cvtColor(resized, cv2.COLOR_GRAY2BGR)
        edges = cv2.Canny(resized, 50, 150)
        contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        cv2.drawContours(model_view, contours, -1, (0,255,0), 1)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cv2.putText(frame, f"Recording: {class_name}", (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,255), 2)
        
        combined = np.hstack([
            cv2.resize(frame, DISPLAY_SIZE),
            cv2.resize(model_view, DISPLAY_SIZE)
        ])
        cv2.imshow("Dataset Recording (Left: Original | Right: Model View)", combined)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
        if time.time() - start_time > 1/FPS:
            timestamp = int(time.time() * 1000)
            cv2.imwrite(f"{DATA_DIR}/{class_name}/{timestamp}.jpg", resized)
            frame_count += 1
            start_time = time.time()

        if cv2.waitKey(1) & 0xFF == ord('q') or time.time() - start_time > RECORD_TIME:
            break

    cap.release()
    cv2.destroyAllWindows()
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤ –≤ {DATA_DIR}/{class_name}")

# ======== [3] –§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è ========
def train_model(classes_to_train): # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    print("\nüß† –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    X, y = [], []
    label_map = {class_name: idx for idx, class_name in enumerate(classes_to_train)}
    
    for class_name in classes_to_train:
        class_dir = f"{DATA_DIR}/{class_name}"
        if not os.path.exists(class_dir):
            print(f"   ‚ö†Ô∏è –ü–∞–ø–∫–∞ '{class_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        for filename in os.listdir(class_dir):
            img = cv2.imread(os.path.join(class_dir, filename), cv2.IMREAD_GRAYSCALE)
            if img is not None:
                X.append(img.flatten())
                y.append(label_map[class_name])

    if len(X) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è! –ó–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.")
        return None
    
    X, y = np.array(X), np.array(y)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è train_test_split
    if len(np.unique(y)) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–ª–∞—Å—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏).")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è train_test_split
    if len(X) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –æ–±—Ä–∞–∑—Ü–∞).")
        return None

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = DecisionTreeClassifier()
    model.fit(X_train, y_train)
    
    accuracy = accuracy_score(y_test, model.predict(X_test))
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.2f}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ label_map –∫–∞–∫ JSON (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    with open('labels.json', 'w') as f:
        json.dump(label_map, f)
    print("üìÑ –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ 'labels.json'")

    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–µ
    model_data = {
        'model': model,
        'accuracy': accuracy,
        'label_map': label_map,
        'classes': classes_to_train # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å
    }
    model_filename = f"model_{int(time.time())}.pkl"
    joblib.dump(model_data, model_filename)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å, –º–µ—Ç–∫–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ '{model_filename}'")
    
    return model

# ======== [4] –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ========
def recognize_objects():
    print("\nüëÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏, –º–µ—Ç–æ–∫ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    try:
        latest_model_file = max(
            [f for f in os.listdir() if f.startswith('model_') and f.endswith('.pkl')],
            key=os.path.getctime
        )
        model_data = joblib.load(latest_model_file)
        model = model_data['model']
        label_map = model_data['label_map']
        trained_accuracy = model_data['accuracy'] * 100 # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        # classes_used_for_training = model_data.get('classes', []) # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å '{latest_model_file}' —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ–±—É—á–µ–Ω–∏—è: {trained_accuracy:.2f}%")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        print("   –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        resized = cv2.resize(gray, IMG_SIZE)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        pred = model.predict([resized.flatten()])[0]
        current_label = [k for k, v in label_map.items() if v == pred][0]
        
        # –í—ã–¥–µ–ª–µ–Ω–∏–µ –í–°–ï–• –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π)
        contours = cv2.findContours(
            cv2.Canny(gray, 50, 150), 
            cv2.RETR_EXTERNAL, 
            cv2.CHAIN_APPROX_SIMPLE
        )[0]
        
        for cnt in contours:
            x, y, w, h = cv2.boundingRect(cnt)
            if w*h > 500:  # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É
                cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        # –û–¥–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        display_text = f"–û–±—ä–µ–∫—Ç: {current_label}"
        accuracy_text = f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {trained_accuracy:.2f}%"

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        (text_w, text_h), _ = cv2.getTextSize(
            display_text, 
            cv2.FONT_HERSHEY_SIMPLEX, 
            1.5, 3
        )
        cv2.putText(
            frame, 
            display_text,
            (frame.shape[1]//2 - text_w//2, 50),  # –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ —Å–≤–µ—Ä—Ö—É
            cv2.FONT_HERSHEY_SIMPLEX, 
            1.5, 
            (0, 255, 0), 
            3, 
            cv2.LINE_AA
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        (acc_w, acc_h), _ = cv2.getTextSize(
            accuracy_text, 
            cv2.FONT_HERSHEY_SIMPLEX, 
            0.8, 2
        )
        cv2.putText(
            frame, 
            accuracy_text,
            (frame.shape[1] - acc_w - 20, frame.shape[0] - 20), # –í –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            cv2.FONT_HERSHEY_SIMPLEX, 
            0.8, 
            (255, 255, 0), # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            2, 
            cv2.LINE_AA
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cv2.imshow("Object Recognition", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            print("\nüõë –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break

    cap.release()
    cv2.destroyAllWindows()

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤ ========
def get_existing_classes():
    existing_classes = []
    if os.path.exists(DATA_DIR):
        for item in os.listdir(DATA_DIR):
            item_path = os.path.join(DATA_DIR, item)
            if os.path.isdir(item_path) and not item.startswith('.'): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
                existing_classes.append(item)
    return sorted(list(set(existing_classes))) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ

# ======== [5] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ========
def main_menu():
    global CLASSES 
    
    print("\n" + "="*40)
    print(" –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ê–°–°–û–í –û–ë–™–ï–ö–¢–û–í ".center(40))
    print("="*40)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –ø–∞–ø–æ–∫
    existing_classes = get_existing_classes()
    
    if existing_classes:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã: {', '.join(existing_classes)}")
        print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã.")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –ò –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.")
        print("3. –í–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ).")
        
        choice_class_setup = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
        
        if choice_class_setup == '1':
            CLASSES = existing_classes
        elif choice_class_setup == '2':
            new_classes_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
            new_classes = [c.strip() for c in new_classes_input.split(',') if c.strip()]
            CLASSES = sorted(list(set(existing_classes + new_classes))) # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        elif choice_class_setup == '3':
            user_input_classes = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
            CLASSES = [c.strip() for c in user_input_classes.split(',') if c.strip()]
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            CLASSES = existing_classes
    else:
        print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å,")
        print("—Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–Ω–∏–≥–∞,–∫—É–±–∏–∫,—Ç–µ–ª–µ—Ñ–æ–Ω).")
        print("–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'book,cube' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        
        user_input_classes = input("–í–∞—à–∏ –∫–ª–∞—Å—Å—ã: ").strip()
        if user_input_classes:
            CLASSES = [c.strip() for c in user_input_classes.split(',') if c.strip()]
        else:
            CLASSES = ["book", "cube"] # –ö–ª–∞—Å—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if not CLASSES:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –í—ã—Ö–æ–¥.")
        return

    print(f"\n‚úÖ –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞—Å—Å—ã: {', '.join(CLASSES)}")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –∑–¥–µ—Å—å, –≤ –Ω–∞—á–∞–ª–µ main_menu
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫...")
    for class_name in CLASSES:
        os.makedirs(f"{DATA_DIR}/{class_name}", exist_ok=True)
        print(f"   ‚úÖ –ü–∞–ø–∫–∞ '{DATA_DIR}/{class_name}' –≥–æ—Ç–æ–≤–∞")

    while True:
        print("\n" + "="*40)
        print(" –ú–ï–ù–Æ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í ".center(40))
        print("="*40)
        
        menu_options = {}
        current_option_num = 1

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
        for class_name in CLASSES:
            menu_options[str(current_option_num)] = {"action": "record", "class_name": class_name}
            print(f"{current_option_num}. üìπ –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è '{class_name}'")
            current_option_num += 1
        
        menu_options[str(current_option_num)] = {"action": "train"}
        print(f"{current_option_num}. üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
        train_option_num = current_option_num
        current_option_num += 1

        menu_options[str(current_option_num)] = {"action": "recognize"}
        print(f"{current_option_num}. üëÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
        current_option_num += 1

        menu_options[str(current_option_num)] = {"action": "exit"}
        print(f"{current_option_num}. üö™ –í—ã—Ö–æ–¥")
        
        print("="*40)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice in menu_options:
            selected_action = menu_options[choice]
            if selected_action["action"] == "record":
                record_dataset(selected_action["class_name"])
            elif selected_action["action"] == "train":
                train_model(CLASSES) # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            elif selected_action["action"] == "recognize":
                recognize_objects()
            elif selected_action["action"] == "exit":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")

if __name__ == "__main__":
    print("\nüåü –°–ò–°–¢–ï–ú–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í v2.0")
    main_menu()
